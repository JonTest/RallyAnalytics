// Generated by CoffeeScript 1.4.0
(function() {
  var BurnVisualizer, Time, lumenize, utils,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof exports !== "undefined" && exports !== null) {
    lumenize = require('../lib/lumenize');
  } else {
    lumenize = require('/lumenize');
  }

  utils = lumenize.utils, Time = lumenize.Time;

  BurnVisualizer = (function(_super) {

    __extends(BurnVisualizer, _super);

    function BurnVisualizer() {
      this.onNewDataAvailable = __bind(this.onNewDataAvailable, this);
      return BurnVisualizer.__super__.constructor.apply(this, arguments);
    }

    /*
    */


    BurnVisualizer.prototype.initialize = function() {
      if (this.config.trace) {
        console.log('in BurnVisualizer.initialize');
      }
      BurnVisualizer.__super__.initialize.call(this);
      if (this.config.granularity != null) {
        this.config.lumenizeCalculatorConfig.granularity = this.config.granularity;
      } else {
        this.config.lumenizeCalculatorConfig.granularity = lumenize.Time.DAY;
      }
      this.config.lumenizeCalculatorConfig.workDayStartOn = this.config.workDayStartOn;
      this.config.lumenizeCalculatorConfig.workDayEndBefore = this.config.workDayEndBefore;
      this.config.lumenizeCalculatorConfig.holidays = this.config.holidays;
      this.config.lumenizeCalculatorConfig.workDays = this.config.workDays;
      this.config.lumenizeCalculatorConfig.startOn = new Time(this.config.scopeData.StartDate, Time.MILLISECOND, this.config.lumenizeCalculatorConfig.tz).getISOStringInTZ('GMT');
      this.config.lumenizeCalculatorConfig.endBefore = new Time(this.config.scopeData.EndDate, Time.MILLISECOND, this.config.lumenizeCalculatorConfig.tz).addInPlace(1, this.config.lumenizeCalculatorConfig.granularity).getISOStringInTZ('GMT');
      this.config.acceptedStates = ['Accepted', 'Released'];
      this.config.lumenizeCalculatorConfig.metrics = [
        {
          as: 'StoryCountBurnUp',
          f: 'filteredCount',
          filterField: 'ScheduleState',
          filterValues: this.config.acceptedStates
        }, {
          as: 'StoryUnitBurnUp',
          field: 'PlanEstimate',
          f: 'filteredSum',
          filterField: 'ScheduleState',
          filterValues: this.config.acceptedStates
        }, {
          as: 'StoryUnitScope',
          field: 'PlanEstimate',
          f: 'sum'
        }, {
          as: 'StoryCountScope',
          f: 'count'
        }, {
          as: 'TaskUnitBurnDown',
          field: 'TaskRemainingTotal',
          f: 'sum'
        }, {
          as: 'TaskUnitScope',
          field: 'TaskEstimateTotal',
          f: 'sum'
        }
      ];
      this.config.lumenizeCalculatorConfig.summaryMetricsConfig = [
        {
          field: 'TaskUnitScope',
          f: 'max'
        }, {
          field: 'TaskUnitBurnDown',
          f: 'max'
        }, {
          field: 'StoryUnitScope',
          f: 'max'
        }, {
          as: 'TaskUnitBurnDown_max_index',
          f: function(seriesData, summaryMetrics) {
            var index, row, _i, _len;
            for (index = _i = 0, _len = seriesData.length; _i < _len; index = ++_i) {
              row = seriesData[index];
              if (row.TaskUnitBurnDown === summaryMetrics.TaskUnitBurnDown_max) {
                return index;
              }
            }
          }
        }
      ];
      this.config.lumenizeCalculatorConfig.deriveFieldsAfterSummary = [
        {
          as: 'Ideal',
          f: function(row, index, summaryMetrics, seriesData) {
            var incrementAmount, increments, max;
            max = summaryMetrics.TaskUnitScope_max;
            increments = seriesData.length - 1;
            incrementAmount = max / increments;
            return Math.floor(100 * (max - index * incrementAmount)) / 100;
          }
        }, {
          as: 'Ideal2',
          f: function(row, index, summaryMetrics, seriesData) {
            var incrementAmount, increments, max;
            if (index < summaryMetrics.TaskUnitBurnDown_max_index) {
              return null;
            } else {
              max = summaryMetrics.TaskUnitBurnDown_max;
              increments = seriesData.length - 1 - summaryMetrics.TaskUnitBurnDown_max_index;
              incrementAmount = max / increments;
              return Math.floor(100 * (max - (index - summaryMetrics.TaskUnitBurnDown_max_index) * incrementAmount)) / 100;
            }
          }
        }, {
          as: 'StoryUnitBurnDown',
          f: function(row, index, summaryMetrics, seriesData) {
            return row.StoryUnitScope - row.StoryUnitBurnUp;
          }
        }, {
          as: 'StoryUnitIdeal',
          f: function(row, index, summaryMetrics, seriesData) {
            var incrementAmount, increments, max;
            max = seriesData[0].StoryUnitBurnDown;
            increments = seriesData.length - 1;
            incrementAmount = max / increments;
            return Math.floor(100 * (max - (index * incrementAmount))) / 100;
          }
        }
      ];
      return this.LumenizeCalculatorClass = lumenize.TimeSeriesCalculator;
    };

    BurnVisualizer.prototype.onNewDataAvailable = function() {
      var fields, queryConfig, scopeValue;
      if (this.config.trace) {
        console.log('in BurnVisualizer.onNewDataAvailable');
      }
      queryConfig = {
        'X-RallyIntegrationName': 'Burn Chart (prototype)',
        'X-RallyIntegrationVendor': 'Rally Red Pill',
        'X-RallyIntegrationVersion': '0.2.0',
        workspaceOID: this.projectAndWorkspaceScope.workspaceOID
      };
      if (this.upToDateISOString == null) {
        this.upToDateISOString = '2011-12-01T00:00:00.000Z';
      }
      this.analyticsQuery = new GuidedAnalyticsQuery(queryConfig, this.upToDateISOString);
      if (this.config.scopeData.ObjectID != null) {
        scopeValue = this.config.scopeData.ObjectID;
      } else {
        scopeValue = this.config.scopeValue;
      }
      this.analyticsQuery.scope(this.config.scopeField, scopeValue);
      fields = ["ObjectID", "_ValidFrom", "_ValidTo", "ScheduleState", "PlanEstimate", "TaskRemainingTotal", "TaskEstimateTotal"];
      this.analyticsQuery.type(['HierarchicalRequirement', 'Defect', 'TestCase', 'DefectSuite']).leafOnly().fields(fields).hydrate(['ScheduleState']);
      if (this.config.asOf != null) {
        this.analyticsQuery.additionalCriteria({
          _ValidFrom: {
            $lt: this.getAsOfISOString()
          }
        });
      }
      if (this.config.debug) {
        this.analyticsQuery.debug();
        console.log('Requesting data...');
      }
      this.fetchPending = true;
      return this.analyticsQuery.getPage(this.onSnapshotsReceieved);
    };

    BurnVisualizer.prototype.getHashForCache = function() {
      var hashObject, hashString, out, salt, userConfig;
      if (this.config.trace) {
        console.log('in BurnVisualizer.getHashForCache');
      }
      hashObject = {};
      userConfig = utils.clone(this.userConfig);
      delete userConfig.debug;
      delete userConfig.trace;
      hashObject.userConfig = userConfig;
      hashObject.projectAndWorkspaceScope = this.projectAndWorkspaceScope;
      hashObject.workspaceConfiguration = this.workspaceConfiguration;
      salt = 'Burn v0.2.11';
      salt = Math.random().toString();
      hashString = JSON.stringify(hashObject);
      out = md5(hashString + salt);
      return out;
    };

    BurnVisualizer.prototype.updateVisualizationData = function() {
      var calculatorResults, categories, row, s, series, seriesData, _i, _len;
      if (this.config.trace) {
        console.log('in BurnVisualizer.updateVisualizationData');
      }
      calculatorResults = this.lumenizeCalculator.getResults();
      if (calculatorResults.length === 0) {
        if (this.config.debug) {
          console.log('No calculatorResults.');
        }
        if (this.fetchPending) {
          if (this.config.debug) {
            console.log('fetchPending is true so returning with visualizationData = null.');
          }
          this.visualizationData = null;
          return;
        } else {
          series = [];
          if (this.config.debug) {
            console.log('fetchPending is false so filling in with blanks');
          }
        }
      } else {
        this.virgin = false;
      }
      seriesData = calculatorResults.seriesData;
      series = lumenize.arrayOfMaps_To_HighChartsSeries(seriesData, this.config.chartSeries);
      for (_i = 0, _len = series.length; _i < _len; _i++) {
        s = series[_i];
        if (s.displayName != null) {
          s.name = s.displayName;
        }
      }
      categories = (function() {
        var _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = seriesData.length; _j < _len1; _j++) {
          row = seriesData[_j];
          _results.push(row.label);
        }
        return _results;
      })();
      return this.visualizationData = {
        series: series,
        categories: categories
      };
    };

    BurnVisualizer.prototype.updateVisualization = function() {
      var chart, index, s, series, _i, _len, _ref;
      this.updateVisualizationData();
      chart = this.visualizations.chart;
      series = chart.series;
      _ref = this.visualizationData.series;
      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
        s = _ref[index];
        series[index].setData(s.data, false);
      }
      chart.xAxis[0].setCategories(this.visualizationData.categories, false);
      return chart.redraw();
    };

    return BurnVisualizer;

  })(VisualizerBase);

  this.BurnVisualizer = BurnVisualizer;

}).call(this);
